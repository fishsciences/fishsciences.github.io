535L, 923L, 905L, 704L), class = "data.frame")
library(shiny)
library(tidyverse)
library(stringr)
library(rsconnect)
library(shinythemes)
library(plotly)
data(crime_master)
crime_plot <- crime_master
ui <- fluidPage(theme = shinytheme("cerulean"),
titlePanel("My title"),
sidebarLayout(
sidebarPanel(
h3("Select the inputs"),
selectInput(inputId = "y",
label = "Indicator to display on Y-axis",
choices = c("Road accidents" = "ROADACCIDENT",
"Crime share" = "CRIMESHARE",
"Murders" = "MURDER"),
selected = "ROADACCIDENT"),
selectizeInput(inputId = "region",
label = "Select regions",
choices = (c(crime_plot$NAME)),
multiple = TRUE,
options = list(maxItems = 5))),
mainPanel(
h3("Plot indicators over time"),
plotlyOutput(outputId = "scatterplot"))))
server <- function(input, output){
regions_subset <- reactive({
req(input$region)
filter(crime_plot, NAME %in% input$region)})
y_label <- reactive({
req(input$y)
if(input$y == "ROADACCIDENT"){
y_label <- "Road accidents"
} else if(input$y == "CRIMESHARE"){
y_label <- "Crime share"
} else if(input$y == "MURDER"){
y_label <- "Murders"
}})
output$scatterplot <- renderPlotly({
ggplotly(ggplot(data = regions_subset(),
aes_string(x = "YEAR", y = input$y, color = "NAME")) +
geom_point() +
labs(x = "Year", y = y_label()) +
scale_color_discrete(name = "Regions"))})
output$event <- renderPrint({
k <- event_data("plotly_hover")
if (is.null(k)) "Hover on a point!" else d})}
shinyApp(ui = ui, server = server)
crime_plot = structure(list(ROADACCIDENT = c(142.69999694825, 120.40000152588,
130.19999694825, 155.10000610352, NA, 181.10000610352, 54.20000076294,
118.09999847413, 85.19999694825, 112.40000152588),
CRIMESHARE = c(3142, 1695, 1554, 2806, 3368, 3164, 1359, 2013, 711, 2446),
MURDER = c(267, 605, 309, 185, 65, 590, 93, 631, 501, 138),
NAME = c("Khabarovsk Krai", "Chelyabinsk Oblast", "Novosibirsk Oblast", "Amur Oblast", "Magadan Oblast", "Krasnoyarsk Krai", "Karachay-Cherkess Republic", "Moscow", "Moscow",
"Kostroma Oblast"), ID = c(29, 13, 49, 5, 41, 36, 26, 44, 44,
34), YEAR = c(2009, 1992, 1990, 2007, 2001, 2007, 1999, 2009,
1991, 2000)), row.names = c(608L, 255L, 1009L, 102L, 852L, 753L,
535L, 923L, 905L, 704L), class = "data.frame")
library(shiny)
library(tidyverse)
library(stringr)
library(rsconnect)
library(shinythemes)
library(plotly)
data(crime_master)
crime_plot <- crime_master
ui <- fluidPage(theme = shinytheme("cerulean"),
titlePanel("My title"),
sidebarLayout(
sidebarPanel(
h3("Select the inputs"),
selectInput(inputId = "y",
label = "Indicator to display on Y-axis",
choices = c("Road accidents" = "ROADACCIDENT",
"Crime share" = "CRIMESHARE",
"Murders" = "MURDER"),
selected = "ROADACCIDENT"),
selectizeInput(inputId = "region",
label = "Select regions",
choices = sort(unique(c(crime_plot$NAME))),
multiple = TRUE,
options = list(maxItems = 5))),
mainPanel(
h3("Plot indicators over time"),
plotlyOutput(outputId = "scatterplot"))))
server <- function(input, output){
regions_subset <- reactive({
req(input$region)
filter(crime_plot, NAME %in% input$region)})
y_label <- reactive({
req(input$y)
if(input$y == "ROADACCIDENT"){
y_label <- "Road accidents"
} else if(input$y == "CRIMESHARE"){
y_label <- "Crime share"
} else if(input$y == "MURDER"){
y_label <- "Murders"
}})
output$scatterplot <- renderPlotly({
ggplotly(ggplot(data = regions_subset(),
aes_string(x = "YEAR", y = input$y, color = "NAME")) +
geom_point() +
labs(x = "Year", y = y_label()) +
scale_color_discrete(name = "Regions"))})
output$event <- renderPrint({
k <- event_data("plotly_hover")
if (is.null(k)) "Hover on a point!" else d})}
shinyApp(ui = ui, server = server)
head(crime_plot)
names(crime_plot) <- c(`Road accidents`, `Crime share`, Murder, Name, ID, Year)
names(crime_plot) <- c("Road accidents", "Crime share", "Murder", "Name", "ID", "Year")
View(crime_plot)
crime_plot = structure(list(ROADACCIDENT = c(142.69999694825, 120.40000152588,
130.19999694825, 155.10000610352, NA, 181.10000610352, 54.20000076294,
118.09999847413, 85.19999694825, 112.40000152588),
CRIMESHARE = c(3142, 1695, 1554, 2806, 3368, 3164, 1359, 2013, 711, 2446),
MURDER = c(267, 605, 309, 185, 65, 590, 93, 631, 501, 138),
NAME = c("Khabarovsk Krai", "Chelyabinsk Oblast", "Novosibirsk Oblast", "Amur Oblast", "Magadan Oblast", "Krasnoyarsk Krai", "Karachay-Cherkess Republic", "Moscow", "Moscow",
"Kostroma Oblast"), ID = c(29, 13, 49, 5, 41, 36, 26, 44, 44,
34), YEAR = c(2009, 1992, 1990, 2007, 2001, 2007, 1999, 2009,
1991, 2000)), row.names = c(608L, 255L, 1009L, 102L, 852L, 753L,
535L, 923L, 905L, 704L), class = "data.frame")
library(shiny)
library(tidyverse)
library(stringr)
library(rsconnect)
library(shinythemes)
library(plotly)
data(crime_master)
crime_plot <- crime_master
names(crime_plot) <- c("Road accidents", "Crime share", "Murders", "Name", "ID", "Year")
ui <- fluidPage(theme = shinytheme("cerulean"),
titlePanel("My title"),
sidebarLayout(
sidebarPanel(
h3("Select the inputs"),
selectInput(inputId = "y",
label = "Indicator to display on Y-axis",
# choices = c("Road accidents" = "ROADACCIDENT",
#             "Crime share" = "CRIMESHARE",
#             "Murders" = "MURDER"),
# selected = "ROADACCIDENT"),
choices = c("Road accidents",
"Crime share",
"Murders"),
selected = "Road accidents"),
selectizeInput(inputId = "region",
label = "Select regions",
choices = sort(unique(c(crime_plot$Name))),
multiple = TRUE,
options = list(maxItems = 5))),
mainPanel(
h3("Plot indicators over time"),
plotlyOutput(outputId = "scatterplot"))))
server <- function(input, output){
regions_subset <- reactive({
req(input$region)
filter(crime_plot, NAME %in% input$region)})
# y_label <- reactive({
#   req(input$y)
#   if(input$y == "ROADACCIDENT"){
#     y_label <- "Road accidents"
#   } else if(input$y == "CRIMESHARE"){
#     y_label <- "Crime share"
#   } else if(input$y == "MURDER"){
#     y_label <- "Murders"
#   }})
output$scatterplot <- renderPlotly({
ggplotly(ggplot(data = regions_subset(),
aes_string(x = "Year", y = input$y, color = "Name")) +
geom_point() +
# labs(x = "Year", y = y_label()) +
scale_color_discrete(name = "Regions"))})
output$event <- renderPrint({
k <- event_data("plotly_hover")
if (is.null(k)) "Hover on a point!" else d})}
shinyApp(ui = ui, server = server)
crime_plot = structure(list(ROADACCIDENT = c(142.69999694825, 120.40000152588,
130.19999694825, 155.10000610352, NA, 181.10000610352, 54.20000076294,
118.09999847413, 85.19999694825, 112.40000152588),
CRIMESHARE = c(3142, 1695, 1554, 2806, 3368, 3164, 1359, 2013, 711, 2446),
MURDER = c(267, 605, 309, 185, 65, 590, 93, 631, 501, 138),
NAME = c("Khabarovsk Krai", "Chelyabinsk Oblast", "Novosibirsk Oblast", "Amur Oblast", "Magadan Oblast", "Krasnoyarsk Krai", "Karachay-Cherkess Republic", "Moscow", "Moscow",
"Kostroma Oblast"), ID = c(29, 13, 49, 5, 41, 36, 26, 44, 44,
34), YEAR = c(2009, 1992, 1990, 2007, 2001, 2007, 1999, 2009,
1991, 2000)), row.names = c(608L, 255L, 1009L, 102L, 852L, 753L,
535L, 923L, 905L, 704L), class = "data.frame")
library(shiny)
library(tidyverse)
library(stringr)
library(rsconnect)
library(shinythemes)
library(plotly)
data(crime_master)
crime_plot <- crime_master
names(crime_plot) <- c("Road accidents", "Crime share", "Murders", "Name", "ID", "Year")
ui <- fluidPage(theme = shinytheme("cerulean"),
titlePanel("My title"),
sidebarLayout(
sidebarPanel(
h3("Select the inputs"),
selectInput(inputId = "y",
label = "Indicator to display on Y-axis",
# choices = c("Road accidents" = "ROADACCIDENT",
#             "Crime share" = "CRIMESHARE",
#             "Murders" = "MURDER"),
# selected = "ROADACCIDENT"),
choices = c("Road accidents",
"Crime share",
"Murders"),
selected = "Road accidents"),
selectizeInput(inputId = "region",
label = "Select regions",
choices = sort(unique(c(crime_plot$Name))),
multiple = TRUE,
options = list(maxItems = 5))),
mainPanel(
h3("Plot indicators over time"),
plotlyOutput(outputId = "scatterplot"))))
server <- function(input, output){
regions_subset <- reactive({
req(input$region)
filter(crime_plot, Name %in% input$region)})
# y_label <- reactive({
#   req(input$y)
#   if(input$y == "ROADACCIDENT"){
#     y_label <- "Road accidents"
#   } else if(input$y == "CRIMESHARE"){
#     y_label <- "Crime share"
#   } else if(input$y == "MURDER"){
#     y_label <- "Murders"
#   }})
output$scatterplot <- renderPlotly({
ggplotly(ggplot(data = regions_subset(),
aes_string(x = "Year", y = input$y, color = "Name")) +
geom_point() +
# labs(x = "Year", y = y_label()) +
scale_color_discrete(name = "Regions"))})
output$event <- renderPrint({
k <- event_data("plotly_hover")
if (is.null(k)) "Hover on a point!" else d})}
shinyApp(ui = ui, server = server)
crime_plot = structure(list(ROADACCIDENT = c(142.69999694825, 120.40000152588,
130.19999694825, 155.10000610352, NA, 181.10000610352, 54.20000076294,
118.09999847413, 85.19999694825, 112.40000152588),
CRIMESHARE = c(3142, 1695, 1554, 2806, 3368, 3164, 1359, 2013, 711, 2446),
MURDER = c(267, 605, 309, 185, 65, 590, 93, 631, 501, 138),
NAME = c("Khabarovsk Krai", "Chelyabinsk Oblast", "Novosibirsk Oblast", "Amur Oblast", "Magadan Oblast", "Krasnoyarsk Krai", "Karachay-Cherkess Republic", "Moscow", "Moscow",
"Kostroma Oblast"), ID = c(29, 13, 49, 5, 41, 36, 26, 44, 44,
34), YEAR = c(2009, 1992, 1990, 2007, 2001, 2007, 1999, 2009,
1991, 2000)), row.names = c(608L, 255L, 1009L, 102L, 852L, 753L,
535L, 923L, 905L, 704L), class = "data.frame")
library(shiny)
library(tidyverse)
library(stringr)
library(rsconnect)
library(shinythemes)
library(plotly)
data(crime_master)
crime_plot <- crime_master
names(crime_plot) <- c("Road accidents", "Crime share", "Murders", "Name", "ID", "Year")
ui <- fluidPage(theme = shinytheme("cerulean"),
titlePanel("My title"),
sidebarLayout(
sidebarPanel(
h3("Select the inputs"),
selectInput(inputId = "y",
label = "Indicator to display on Y-axis",
# choices = c("Road accidents" = "ROADACCIDENT",
#             "Crime share" = "CRIMESHARE",
#             "Murders" = "MURDER"),
# selected = "ROADACCIDENT"),
choices = c("Road accidents",
"Crime share",
"Murders"),
selected = "Road accidents"),
selectizeInput(inputId = "region",
label = "Select regions",
choices = sort(unique(c(crime_plot$Name))),
multiple = TRUE,
options = list(maxItems = 5))),
mainPanel(
h3("Plot indicators over time"),
plotlyOutput(outputId = "scatterplot"))))
server <- function(input, output){
regions_subset <- reactive({
req(input$region)
filter(crime_plot, Name %in% input$region)})
# y_label <- reactive({
#   req(input$y)
#   if(input$y == "ROADACCIDENT"){
#     y_label <- "Road accidents"
#   } else if(input$y == "CRIMESHARE"){
#     y_label <- "Crime share"
#   } else if(input$y == "MURDER"){
#     y_label <- "Murders"
#   }})
output$scatterplot <- renderPlotly({
print(input$y)
ggplotly(ggplot(data = regions_subset(),
aes_string(x = "Year", y = input$y, color = "Name")) +
geom_point() +
# labs(x = "Year", y = y_label()) +
scale_color_discrete(name = "Regions"))})
output$event <- renderPrint({
k <- event_data("plotly_hover")
if (is.null(k)) "Hover on a point!" else d})}
shinyApp(ui = ui, server = server)
name <- c(54,000,00)
age <- c(5, 3, 1)
weight <- c(120, 23, 245)
address <- c("kg", "kgi", "gg")
df1 <- data.frame(name, age, weight, address)
df2 <- data.frame(matrix(ncol = 4, nrow=0))
colnames(df2)[1] <- "Name"
colnames(df2)[2] <- "age"
colnames(df2)[3] <- "weight"
colnames(df2)[4] <- "address"
df2
for (i in 1: ncol(df2)){
hd1 = colnames(df2)[i]
j <- 1
while (j <= ncol(df1)){
hd2 = colnames(df1)[j]
if(hd1 == hd2){
x <- 1
while(x <= nrow(df1)) {
df2[x,hd1] <- df1[x,colnames(df1)[j]]
x = x + 1
}
}
j = j + 1
}
}
df2
str(address)
str(df1)
df1 <- data.frame(name, age, weight, address, stringsAsFactors = TRUE)
df1 <- data.frame(name, age, weight, address, stringsAsFactors = FALSE)
df2 <- data.frame(matrix(ncol = 4, nrow=0))
colnames(df2)[1] <- "Name"
colnames(df2)[2] <- "age"
colnames(df2)[3] <- "weight"
colnames(df2)[4] <- "address"
for (i in 1: ncol(df2)){
hd1 = colnames(df2)[i]
j <- 1
while (j <= ncol(df1)){
hd2 = colnames(df1)[j]
if(hd1 == hd2){
x <- 1
while(x <= nrow(df1)) {
df2[x,hd1] <- df1[x,colnames(df1)[j]]
x = x + 1
}
}
j = j + 1
}
}
df2
install.packages("blogdown")
install.packages(c("assertive.code", "assertive.data.uk", "assertive.data.us", "assertive.models", "devtools", "fiery", "ggiraph", "ggplot2", "MASS", "Matrix", "mgcv", "ModelMetrics", "pkgload", "psych", "raster", "remotes", "reshape", "rlang", "shiny", "survival", "tidyr", "tinytex", "vegan", "xfun"))
shinyWidgets::shinyWidgetsGallery()
d <- tibble(x = runif(20, min = -30, max = 30),
y = runif(20, min = -30, max = 30))
library(tidyverse)
d <- tibble(x = runif(20, min = -30, max = 30),
y = runif(20, min = -30, max = 30))
ggplot(d, aes(x = x, y = y)) +
geom_point()
ggplot(d, aes(x = x, y = y)) +
geom_point() +
theme_classic
ggplot(d, aes(x = x, y = y)) +
geom_point() +
theme_classic()
ggplot(d, aes(x = x, y = y)) +
geom_point() +
theme_classic()
ggplot(d, aes(x = x, y = y)) +
geom_point() +
geom_hline(aes(yintercept = 0)) +
geom_vline(aes(xintercept = 0))
library(shiny)
ui <- fluidPage(
sidebarLayout(
selectInput("Var1",
label = "Variable", #DATA CHOICE 1
selected = 10,
choices = c(10:100)),
selectInput("Var1",
label = "Variable2", #DATA CHOICE 2
selected = 10,
choices = c(10:100))
# Show a plot of the generated distribution
),
mainPanel(
plotlyOutput('plot') #Draw figure
)
)
server <- function(input, output) {
out <- reactive({
data.frame(x = rnorm(input$Var1), #Build data set 1
y  = 1:input$Var1)
})
out2 <- reactive({
data.frame(x = rnorm(input$Var2), #Build data set 2
y  = 1:input$Var2)
})
output$plot <- renderPlotly({
p <- ggplot() +
geom_line(data = out(), aes(x = x, y = y)) #Add both data sets in one ggplot
geom_line(data = out2(), aes(x = x, y = y), color = "red")
ggplotly(p)
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sidebarLayout(
selectInput("Var1",
label = "Variable", #DATA CHOICE 1
selected = 10,
choices = c(10:100)),
selectInput("Var1",
label = "Variable2", #DATA CHOICE 2
selected = 10,
choices = c(10:100))
# Show a plot of the generated distribution
),
mainPanel(
plotlyOutput('plot') #Draw figure
)
)
server <- function(input, output) {
out <- reactive({
data.frame(x = rnorm(input$Var1), #Build data set 1
y  = 1:input$Var1)
})
out2 <- reactive({
data.frame(x = rnorm(input$Var2), #Build data set 2
y  = 1:input$Var2)
})
output$plot <- renderPlotly({
p <- ggplot() +
geom_line(data = out(), aes(x = x, y = y)) #Add both data sets in one ggplot
geom_line(data = out2(), aes(x = x, y = y), color = "red")
ggplotly(p)
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sidebarLayout(
selectInput("Var1",
label = "Variable", #DATA CHOICE 1
selected = 10,
choices = c(10:100)),
selectInput("Var1",
label = "Variable2", #DATA CHOICE 2
selected = 10,
choices = c(10:100))
# Show a plot of the generated distribution
),
mainPanel(
plotlyOutput('plot') #Draw figure
)
)
library(plotly)
ui <- fluidPage(
sidebarLayout(
selectInput("Var1",
label = "Variable", #DATA CHOICE 1
selected = 10,
choices = c(10:100)),
selectInput("Var1",
label = "Variable2", #DATA CHOICE 2
selected = 10,
choices = c(10:100))
# Show a plot of the generated distribution
),
mainPanel(
plotlyOutput('plot') #Draw figure
)
)
server <- function(input, output) {
out <- reactive({
data.frame(x = rnorm(input$Var1), #Build data set 1
y  = 1:input$Var1)
})
out2 <- reactive({
data.frame(x = rnorm(input$Var2), #Build data set 2
y  = 1:input$Var2)
})
output$plot <- renderPlotly({
p <- ggplot() +
geom_line(data = out(), aes(x = x, y = y)) #Add both data sets in one ggplot
geom_line(data = out2(), aes(x = x, y = y), color = "red")
ggplotly(p)
})
}
# Run the application
shinyApp(ui = ui, server = server)
install.packages(c("dimRed", "ipred", "jomo", "pander", "ps", "Rcpp", "RgoogleMaps", "roxygen2", "rstan", "xts"))
?blogdown::serve_site
setwd("~/Documents/GitHub/fishsciences.github.io")
blogdown::serve_site()
?blogdown::build_site()
blogdown::build_site()
